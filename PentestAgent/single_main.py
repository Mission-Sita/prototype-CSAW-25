#!/usr/bin/env python3
import json
from pathlib import Path
import asyncio
# Import baseline NYU CTF classes
from nyuctf.challenge import CTFChallenge
from nyuctf.dataset import CTFDataset
from chalenges_integrate.environment import CTFEnvironment    # or from env import CTFEnvironment if you renamed it

# init(autoreset=True)

from agents import set_tracing_disabled
set_tracing_disabled(True)

from agents.mcp import MCPServerStdio, MCPServerSse

DATASET_FILE = "./NYU_CTF_Bench/test_dataset.json"       # or development_dataset.json

def load_dataset(file_path=DATASET_FILE):
    with open(file_path, "r") as f:
        return json.load(f)

def pick_first_challenge(dataset):
    """Just pick the first challenge from JSON for testing."""
    key, meta = next(iter(dataset.items()))
    print(f"[+] Selected challenge: {key}")
    return meta

def build_ctf_challenge():
    """Convert JSON metadata to a CTFChallenge object."""
    ds = CTFDataset(split="test")
    return CTFChallenge(
        ds.get("2021f-pwn-horrorscope"),  # metadata of the challenge
        ds.basedir                        # base path where the challenge files exist
    )

async def main():
    dataset = load_dataset()
    # meta = pick_first_challenge(dataset)
    challenge = build_ctf_challenge()

    # pick a container image based on category
    # For now, hard-coded for quick test
    container_image = "llmctf/2021f-pwn-horrorscope:latest"
    network = "ctfnet"

    env = CTFEnvironment(challenge, container_image, network)

    print("[*] Setting up environment...")
    env.setup()              # starts Docker + copies files


    try:
        print("[*] Environment is ready. Challenge is running.")
        input("Press Enter to tear down environment...")
        # try:
        #     print("[*] Importing PentestAgent...")
        #     from core.pentest_agent import PentestAgent
        #     print("[*] Running PentestAgent...")
        #     agent = PentestAgent(MCPServerStdio, MCPServerSse)
        #     await agent.run()
        
        # except ImportError as e:
        #     print(f"Error importing required modules: {e}")
        #     print("Please ensure all dependencies are installed: pip install -r requirements.txt")
        #     sys.exit(1)
        # except KeyboardInterrupt:
        #     print("\nApplication interrupted by user.")
        #     sys.exit(0)
        # except Exception as e:
        #     print(f"Unexpected error: {e}")
        #     import traceback
        #     traceback.print_exc()
        #     sys.exit(1)


        # except Exception as e:
        #     print(f"[!] Exception occurred: {e}")

        
    finally:
        print("[*] Tearing down environment...")
        env.teardown(None, None, None)
        print("[+] Done.")

if __name__ == "__main__":
    asyncio.run(main())
